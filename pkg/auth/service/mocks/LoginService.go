// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import scm "hidevops.io/hioak/starter/scm"

// LoginService is an autogenerated mock type for the LoginService type
type LoginService struct {
	mock.Mock
}

// GetSession provides a mock function with given fields: baseUrl, username, password
func (_m *LoginService) GetSession(baseUrl string, username string, password string) (string, int, string, error) {
	ret := _m.Called(baseUrl, username, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(baseUrl, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string, string) int); ok {
		r1 = rf(baseUrl, username, password)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string, string, string) string); ok {
		r2 = rf(baseUrl, username, password)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, string, string) error); ok {
		r3 = rf(baseUrl, username, password)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetUser provides a mock function with given fields: baseUrl, accessToken
func (_m *LoginService) GetUser(baseUrl string, accessToken string) (*scm.User, error) {
	ret := _m.Called(baseUrl, accessToken)

	var r0 *scm.User
	if rf, ok := ret.Get(0).(func(string, string) *scm.User); ok {
		r0 = rf(baseUrl, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scm.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(baseUrl, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
