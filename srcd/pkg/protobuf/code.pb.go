// Code generated by protoc-gen-go. DO NOT EDIT.
// source: code.proto

package protobuf

/*
target package name
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CodeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CodeRequest) Reset()         { *m = CodeRequest{} }
func (m *CodeRequest) String() string { return proto.CompactTextString(m) }
func (*CodeRequest) ProtoMessage()    {}
func (*CodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_code_c2eff15feadea323, []int{0}
}
func (m *CodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CodeRequest.Unmarshal(m, b)
}
func (m *CodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CodeRequest.Marshal(b, m, deterministic)
}
func (dst *CodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeRequest.Merge(dst, src)
}
func (m *CodeRequest) XXX_Size() int {
	return xxx_messageInfo_CodeRequest.Size(m)
}
func (m *CodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CodeRequest proto.InternalMessageInfo

type CodeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CodeResponse) Reset()         { *m = CodeResponse{} }
func (m *CodeResponse) String() string { return proto.CompactTextString(m) }
func (*CodeResponse) ProtoMessage()    {}
func (*CodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_code_c2eff15feadea323, []int{1}
}
func (m *CodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CodeResponse.Unmarshal(m, b)
}
func (m *CodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CodeResponse.Marshal(b, m, deterministic)
}
func (dst *CodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeResponse.Merge(dst, src)
}
func (m *CodeResponse) XXX_Size() int {
	return xxx_messageInfo_CodeResponse.Size(m)
}
func (m *CodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CodeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CodeRequest)(nil), "protobuf.CodeRequest")
	proto.RegisterType((*CodeResponse)(nil), "protobuf.CodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CodeServiceClient is the client API for CodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CodeServiceClient interface {
	SourceCodePull(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeResponse, error)
}

type codeServiceClient struct {
	cc *grpc.ClientConn
}

func NewCodeServiceClient(cc *grpc.ClientConn) CodeServiceClient {
	return &codeServiceClient{cc}
}

func (c *codeServiceClient) SourceCodePull(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeResponse, error) {
	out := new(CodeResponse)
	err := c.cc.Invoke(ctx, "/protobuf.CodeService/SourceCodePull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeServiceServer is the server API for CodeService service.
type CodeServiceServer interface {
	SourceCodePull(context.Context, *CodeRequest) (*CodeResponse, error)
}

func RegisterCodeServiceServer(s *grpc.Server, srv CodeServiceServer) {
	s.RegisterService(&_CodeService_serviceDesc, srv)
}

func _CodeService_SourceCodePull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).SourceCodePull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.CodeService/SourceCodePull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).SourceCodePull(ctx, req.(*CodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.CodeService",
	HandlerType: (*CodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SourceCodePull",
			Handler:    _CodeService_SourceCodePull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "code.proto",
}

func init() { proto.RegisterFile("code.proto", fileDescriptor_code_c2eff15feadea323) }

var fileDescriptor_code_c2eff15feadea323 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x4f, 0x49,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0x49, 0xa5, 0x69, 0x4a, 0xbc, 0x5c,
	0xdc, 0xce, 0xf9, 0x29, 0xa9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x4a, 0x7c, 0x5c, 0x3c,
	0x10, 0x6e, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x51, 0x00, 0x44, 0x3a, 0x38, 0xb5, 0xa8, 0x2c,
	0x33, 0x39, 0x55, 0xc8, 0x91, 0x8b, 0x2f, 0x38, 0xbf, 0xb4, 0x28, 0x39, 0x15, 0x24, 0x18, 0x50,
	0x9a, 0x93, 0x23, 0x24, 0xaa, 0x07, 0x33, 0x4a, 0x0f, 0xc9, 0x1c, 0x29, 0x31, 0x74, 0x61, 0x88,
	0x79, 0x4a, 0x0c, 0x4e, 0xea, 0x5c, 0x12, 0x99, 0xf9, 0x7a, 0x29, 0xa9, 0x65, 0xf9, 0x05, 0xc5,
	0x7a, 0xc9, 0xa5, 0x49, 0xa9, 0xfa, 0xc5, 0x45, 0xc9, 0x29, 0x7a, 0x20, 0xc7, 0x39, 0x71, 0x82,
	0x8d, 0x05, 0x69, 0x0c, 0x60, 0x4c, 0x62, 0x03, 0x9b, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xa6, 0x35, 0xc6, 0x5c, 0xb8, 0x00, 0x00, 0x00,
}
