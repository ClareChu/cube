// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "hidevops.io/cube/srcd/pkg/entity"
import git "hidevops.io/hioak/starter/scm/git"
import mock "github.com/stretchr/testify/mock"

// CodeService is an autogenerated mock type for the CodeService type
type CodeService struct {
	mock.Mock
}

// CheckWorkspace provides a mock function with given fields:
func (_m *CodeService) CheckWorkspace() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clone provides a mock function with given fields: clone, cloneFunc
func (_m *CodeService) Clone(clone *entity.Clone, cloneFunc git.CloneFunc) (string, error) {
	ret := _m.Called(clone, cloneFunc)

	var r0 string
	if rf, ok := ret.Get(0).(func(*entity.Clone, git.CloneFunc) string); ok {
		r0 = rf(clone, cloneFunc)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Clone, git.CloneFunc) error); ok {
		r1 = rf(clone, cloneFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields:
func (_m *CodeService) Get() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Pull provides a mock function with given fields:
func (_m *CodeService) Pull() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
